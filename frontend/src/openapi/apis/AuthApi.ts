/* tslint:disable */
/* eslint-disable */
/**
 * User Management System - API
 * APIs for user management and authentication. Double CSRF protection is used, therefore, the client must send the CSRF token in both the cookie and the request header for the non-GET requests.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: cocoychris@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CheckAuthStatus200Response,
  CheckAuthStatus500Response,
  ErrorSchema,
  Login200Response,
  LoginRequest,
  Logout200Response,
  Logout403Response,
  SendVerificationEmail200Response,
} from '../models/index';
import {
    CheckAuthStatus200ResponseFromJSON,
    CheckAuthStatus200ResponseToJSON,
    CheckAuthStatus500ResponseFromJSON,
    CheckAuthStatus500ResponseToJSON,
    ErrorSchemaFromJSON,
    ErrorSchemaToJSON,
    Login200ResponseFromJSON,
    Login200ResponseToJSON,
    LoginRequestFromJSON,
    LoginRequestToJSON,
    Logout200ResponseFromJSON,
    Logout200ResponseToJSON,
    Logout403ResponseFromJSON,
    Logout403ResponseToJSON,
    SendVerificationEmail200ResponseFromJSON,
    SendVerificationEmail200ResponseToJSON,
} from '../models/index';

export interface LoginOperationRequest {
    loginRequest?: LoginRequest;
}

export interface LogoutRequest {
    xCsrfToken: string;
}

export interface SendVerificationEmailRequest {
    xCsrfToken: string;
}

export interface VerifyEmailRequest {
    token: string;
}

/**
 * 
 */
export class AuthApi extends runtime.BaseAPI {

    /**
     * Retrieve the user\'s authentication status. The user is considered authenticated if the session cookie is valid.
     */
    async checkAuthStatusRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CheckAuthStatus200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/check-status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckAuthStatus200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve the user\'s authentication status. The user is considered authenticated if the session cookie is valid.
     */
    async checkAuthStatus(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CheckAuthStatus200Response> {
        const response = await this.checkAuthStatusRaw(initOverrides);
        return await response.value();
    }

    /**
     * Authenticate the user using Google OAuth.
     */
    async googleAuthRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/google`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Authenticate the user using Google OAuth.
     */
    async googleAuth(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.googleAuthRaw(initOverrides);
    }

    /**
     * Callback for Google OAuth. Will redirect to the dashboard if successful.
     */
    async googleAuthCallbackRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/google/callback`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Callback for Google OAuth. Will redirect to the dashboard if successful.
     */
    async googleAuthCallback(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.googleAuthCallbackRaw(initOverrides);
    }

    /**
     * Authenticate the user using the local strategy (email and password).
     */
    async loginRaw(requestParameters: LoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Login200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginRequestToJSON(requestParameters.loginRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => Login200ResponseFromJSON(jsonValue));
    }

    /**
     * Authenticate the user using the local strategy (email and password).
     */
    async login(requestParameters: LoginOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Login200Response> {
        const response = await this.loginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Log out the user.
     */
    async logoutRaw(requestParameters: LogoutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Logout200Response>> {
        if (requestParameters.xCsrfToken === null || requestParameters.xCsrfToken === undefined) {
            throw new runtime.RequiredError('xCsrfToken','Required parameter requestParameters.xCsrfToken was null or undefined when calling logout.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xCsrfToken !== undefined && requestParameters.xCsrfToken !== null) {
            headerParameters['x-csrf-token'] = String(requestParameters.xCsrfToken);
        }

        const response = await this.request({
            path: `/auth/logout`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => Logout200ResponseFromJSON(jsonValue));
    }

    /**
     * Log out the user.
     */
    async logout(requestParameters: LogoutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Logout200Response> {
        const response = await this.logoutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Send the verification email to the user.
     */
    async sendVerificationEmailRaw(requestParameters: SendVerificationEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SendVerificationEmail200Response>> {
        if (requestParameters.xCsrfToken === null || requestParameters.xCsrfToken === undefined) {
            throw new runtime.RequiredError('xCsrfToken','Required parameter requestParameters.xCsrfToken was null or undefined when calling sendVerificationEmail.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xCsrfToken !== undefined && requestParameters.xCsrfToken !== null) {
            headerParameters['x-csrf-token'] = String(requestParameters.xCsrfToken);
        }

        const response = await this.request({
            path: `/auth/send-verification-email`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SendVerificationEmail200ResponseFromJSON(jsonValue));
    }

    /**
     * Send the verification email to the user.
     */
    async sendVerificationEmail(requestParameters: SendVerificationEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SendVerificationEmail200Response> {
        const response = await this.sendVerificationEmailRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Verify the user\'s email using the token.
     */
    async verifyEmailRaw(requestParameters: VerifyEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.token === null || requestParameters.token === undefined) {
            throw new runtime.RequiredError('token','Required parameter requestParameters.token was null or undefined when calling verifyEmail.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/verify-email/{token}`.replace(`{${"token"}}`, encodeURIComponent(String(requestParameters.token))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Verify the user\'s email using the token.
     */
    async verifyEmail(requestParameters: VerifyEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.verifyEmailRaw(requestParameters, initOverrides);
    }

}
